
options {
STATIC = false ;
}
PARSER_BEGIN(AnalizadorSintactico)
package controladoras;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class AnalizadorSintactico{
GenerarJava generar= new GenerarJava();
  public static void main(String[] args) throws FileNotFoundException, ParseException { 
        AnalizadorSintactico parser = new AnalizadorSintactico(new FileReader(args[0]));
        parser.Start();
      
}}
PARSER_END(AnalizadorSintactico)

SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
}

TOKEN : { < NUMBER : (["0"-"9"])+ > }
TOKEN:
{
	  <BEGIN: "begin"> 
	| <END: "end"> 
	| <DECLARE: "declare"> 
	| <ENDDECLARE: "enddeclare"> 
	| <CALL: "call"> 
	| <PROCEDURE: "procedure"> 
	| <FUNCTION: "function"> 
	| <RETURN: "return"> 
	| <IF: "if"> 
	| <THEN: "then"> 
	| <ELIF: "elif"> 
	| <ELSE: "else"> 
	| <BOLEANO: "true"|"false" > 
	| <TIPO: "number"|"chain"|"array" > 
	| <NOT:"not" > 
	| <OPERADORR:"<="|">="|"<"|">"|"="|"<>" > 
	| <OPERADORL :"and"|"or" > 
	| <WHILE:"while" > 
	| <FOR:"for" > 
	| <REPEAT:"repeat" > 
	| <UNTIL:"until" > 
	| <STACK:"stack" > 
	| <QUEUE:"queue" > 
	| <ADD:".add" > 
	| <REMOVE:".pop" > 
	| <PISOBAJO:"!" > 
	| <PARENTESISABIERTO:"(" > 
	| <PARENTESISCERRADO:")" > 
	| <CORCHETEABIERTO:"[" > 
	| <CORCHETECERRADO:"]" > 
	| <ASIGNACION:"<-" >
        | <DO:"do" > 
	| <TO:"to" > 
	| <COMA:"," > 
	| <IDENTIFICADOR : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>
	| <DOUBLECOMMA: "\""> 
	| <CADENA : <DOUBLECOMMA>["a"-"z","A"-"Z","0"-"9"," "](["a"-"z","A"-"Z","0"-"9"," ",":",";","."])*<DOUBLECOMMA>>
	| <OPERADOR : "+"|"-"|"*"|"/">
	| <LENGTH : ".length">
}
void Start() :
{}
{
    <DECLARE>(SUBRUTINA())*<ENDDECLARE>
    {
        generar.escribirPrincipal();
    }
    <BEGIN>
    {
        generar.ambienteVariables();
    }
    E()<END>
    {
        generar.escribir();
    }
}
void SUBRUTINA():
{Token id1; Token id2;Token id3; Token retorno; Token lfunction; Token lprocedure; String parametros="";String parametro;String []valores=new String[2];}
{
        lfunction=<FUNCTION>
        {
            generar.ambienteVariables();
        }
        retorno=<TIPO>id1=<IDENTIFICADOR><PARENTESISABIERTO>(parametro=PARAMETRO()
        {
            parametros=parametros+parametro;
        }
        )*<PARENTESISCERRADO><BEGIN>
        {
            
            generar.escribirFunction(retorno.image, id1.image,parametros);
            generar.escribirParametros(lfunction);
            valores[0]=id1.image;
            valores[1]="subrutina";
            generar.escribirLog(id1,valores);
            
        }
        E()
        <RETURN>id2=<IDENTIFICADOR>
        {
            valores[0]=id1.image;
            valores[1]="subrutina";
            generar.escribirLog(id2,valores);
        }
        <END>
        {
            generar.escribirFinFunction(id2.image);
        }
        | lprocedure=<PROCEDURE>
        {
            generar.ambienteVariables();
        }
        id1=<IDENTIFICADOR><PARENTESISABIERTO>(parametro=PARAMETRO()
        {
            parametros=parametros+parametro;
        }
        )*<PARENTESISCERRADO><BEGIN>
        {
            generar.escribirProcedure(id1.image,parametros);
            generar.escribirParametros(lprocedure);
            valores[0]=id1.image;
            valores[1]="subrutina";
            generar.escribirLog(id1,valores);
        }
        E()id3=<END>
        {
            valores[0]=id1.image;
            valores[1]="subrutina";
            generar.escribirLog(id3,valores);
            generar.escribirFinProcedure();
        }
}
String PARAMETRO():
{Token id1; Token tipo; Token coma=null;}
{
    tipo=<TIPO>id1=<IDENTIFICADOR>(coma=<COMA>)?
    {
        if (coma!=null)
        {
            generar.insertarVariable(tipo.image,id1.image);
            String convertido=generar.conversionTipo(tipo.image);
            return convertido+" "+id1.image+coma.image;
        }
        else
        {
            generar.insertarVariable(tipo.image,id1.image);
            String convertido=generar.conversionTipo(tipo.image);
            return convertido+" "+id1.image;
        }
    }
}
void E() :
{}
{
    (INSTRUCCION()|WHILE()| FOR()|BIFURCACION() | REPEAT())*
}
void REPEAT():
{Token lrepeat; String ncondicion;}
{
    lrepeat=<REPEAT><BEGIN>
    {
        generar.escribirLog(lrepeat, null);
        generar.escribirRepeat();
        generar.escribirLog(lrepeat,null);
    }
    E()<UNTIL><PARENTESISABIERTO>(ncondicion=CONDICION())<PARENTESISCERRADO>
    {
        generar.escribirFinRepeat(ncondicion);
        
    }
    <END>E()
}
void BIFURCACION():
{String ncondicion; Token lif;}
{
    lif=<IF><PARENTESISABIERTO>ncondicion=CONDICION()<PARENTESISCERRADO> <THEN> <BEGIN>
    {
        generar.escribirLog(lif,null);
        generar.escribirIf(ncondicion);
        generar.escribirLog(lif,null);
    } 
    E() 
    {
        generar.recibir("}");
    }
    <END>(BIFURCACION2())*E()
}
void BIFURCACION2():
{String ncondicion; Token lelif; Token lelse;}
{
    lelif=<ELIF><PARENTESISABIERTO>ncondicion=CONDICION()<PARENTESISCERRADO> <THEN> <BEGIN>
    {
        generar.escribirElif(ncondicion);
        generar.escribirLog(lelif,null);
    }
    E()
    {
       generar.recibir("}"); 
    }
    <END>
    | lelse=<ELSE><BEGIN>
    {
        generar.escribirElse();
        generar.escribirLog(lelse,null);
    }
    E()
    {
        generar.recibir("}");
    }
    <END>
}
void WHILE():
{String ncondicion; Token lwhile;}
{
	lwhile=<WHILE><PARENTESISABIERTO>ncondicion=CONDICION()<PARENTESISCERRADO> <DO> <BEGIN>
        {
            generar.escribirLog(lwhile,null);
            generar.escribirWhile(ncondicion);
            generar.escribirLog(lwhile,null);
        } 
        E() 
        {
            generar.recibir("}");
        } 
        <END>
        E()
}
String CONDICION():
{Token n=new Token(); String condicion="";String [] valor1;String [] valor2;}
{
	n= <BOLEANO>condicion=OTRACONDICION()
        {
            return (n.image+" "+ condicion); 
        }
        |<NOT> n=<IDENTIFICADOR> condicion=OTRACONDICION()
        {
            return ("!"+ n.image+" "+ condicion); 
        }
        | valor1=VALOR() n=<OPERADORR> valor2=VALOR() condicion=OTRACONDICION()
        {
            return valor1[0]+" "+n.image+" "+valor2[0]+condicion;
        }
}
String OTRACONDICION():
{Token n=new Token();n.image=""; String condicion="";}
{
    (n=<OPERADORL> condicion=CONDICION())* 
    {
        if(n.image.equals("and"))
        {
            return " && "+condicion;
        } 
        else if(n.image.equals("or"))
        {
            return " || "+condicion;
        } else 
        {
            return "";
        }
    }   
}

void INSTRUCCION():
{Token id; String elemento; String elementos="";}
{
    id=<IDENTIFICADOR>OPERACION(id)E()
    | <CALL>id=<IDENTIFICADOR><PARENTESISABIERTO>(elemento=ELEMENTO()
    {
        elementos=elementos+elemento;
    }
    )*<PARENTESISCERRADO>
    {
        generar.escribirCallProcedure(id.image,elementos);
        generar.escribirLog(id,null);
    }
}

void OPERACION(Token id):
{Token id1=id; String[] valores1=null; String []valores=new String[2]; String elemento; String elementos="";Token pisobajo1=null;}
{
    //Asignacion con piso bajo por si lo tiene
    <ASIGNACION>(pisobajo1=<PISOBAJO>)?OPERACION2(id, null, pisobajo1) 
    |<CORCHETEABIERTO>valores1=VALOR()<CORCHETECERRADO><ASIGNACION>(pisobajo1=<PISOBAJO>)?OPERACION2(id1, valores1, pisobajo1)
    |<ADD><PARENTESISABIERTO>valores1=VALOR()<PARENTESISCERRADO>
    {
        String tipo=generar.buscarVariable(id1.image);
        if (tipo.equals("stack"))
        {
            generar.escribirApilar(id1.image, valores1[0]);
            String []valores5=new String[2];
            valores5[0]=id1.image;
            valores5[1]=tipo;
            generar.escribirLog(id1,valores5);
        }
        else
        {
            generar.escribirEncolar(id1.image, valores1[0]);
            String []valores5=new String[2];
            valores5[0]=id1.image;
            valores5[1]=tipo;
            generar.escribirLog(id1,valores5);
        }
    }
}
void OPERACION2(Token id, String []valores, Token pisobajo):
{Token id1=id; Token pisobajo1=pisobajo; String []valores3=valores; String []valores1=null; Token id2=null; Token op=null; String[] valores2=new String [2]; String elementos=""; String elemento=""; int celementos=0;}
{
    valores1=VALOR()OPERACION3(id1,valores1, valores3, pisobajo1) //esto es para la operacion entre variables y arreglos
    | <CORCHETEABIERTO>(elemento=ELEMENTO() //Esto es para la creacion de un arreglo
    {
        elementos=elementos+elemento;
        celementos++;
    }
    )*<CORCHETECERRADO>
    {
        valores2[0]=id1.image;
        valores2[1]="array";
        generar.insertarVariable("array", id1.image);
        String tipo=generar.buscarVariable(id1.image);
        generar.escribirArreglo(tipo, id1.image, elementos);
        generar.escribirLog(id1, valores2);
    }
    | <CALL>id2=<IDENTIFICADOR><PARENTESISABIERTO>(elemento=ELEMENTO() //Llamo a funciones segun la asignacion variable, arreglo o posicion de un arreglo
    {
        elementos=elementos+elemento;
    }
    )*<PARENTESISCERRADO>
    {
        if (valores3==null)
        {
            tipo=generar.buscarVariable(id1.image);
            if (tipo==null)
            {
                tipo=generar.buscarFunction(id2.image);
                generar.insertarVariable(tipo,id1.image);
                generar.escribirCallFunctionVariableOArreglo(tipo,id1.image,id2.image,elementos);
            }
            else
            {
                generar.escribirCallFunctionVariableOArreglo(null,id1.image,id2.image,elementos);
            }
            String []valores5=new String[2];
            valores5[0]=id1.image;
            valores5[1]=tipo;
            generar.escribirLog(id1,valores5);
        }
        else
        {
            generar.escribirCallFunctionArregloPos(id1.image,valores3[0],id2.image,elementos); 
            //no hay que verificar el tipo de variable ya que es una posicion de arreglo y el arreglo ya debe estar definido
            tipo=generar.buscarVariable(id1.image);
            String []valores5=new String[2];
            valores5[0]=id1.image;
            valores5[1]=tipo;
            generar.escribirLog(id1,valores5);
        }
    }
    | <STACK><PARENTESISABIERTO><PARENTESISCERRADO>
    {
        generar.insertarVariable("stack", id1.image);
        generar.escribirPila(id1.image);
        String []valores5=new String[2];
        valores5[0]=id1.image;
        valores5[1]="stack";
        generar.escribirLog(id1,valores5);
    }
    | <QUEUE><PARENTESISABIERTO><PARENTESISCERRADO>
    {
        generar.insertarVariable("queue", id1.image);
        generar.escribirCola(id1.image);
        String []valores6=new String[2];
        valores6[0]=id1.image;
        valores6[1]="queue";
        generar.escribirLog(id1,valores6);
    }
    
}

void OPERACION3(Token id, String []valores, String []valoresb, Token pisobajo):
{Token longitud=null;Token pisobajo1=pisobajo; Token pisobajo2=null; Token id1=id; String []valores1=valores; String []valores4=valoresb; String []valores2=null; String []valores3=null; Token op; boolean bandera=false; String []valores5=new String[2];}
{
    <CORCHETEABIERTO>valores2=VALOR()<CORCHETECERRADO>(OPERACION4(id1,valores4, valores1,valores2,pisobajo1)) //Si una variable va a acceder a una posicion de un arreglo
 
    | op=<OPERADOR>valores2=VALOR()(<CORCHETEABIERTO>valores3=VALOR()<CORCHETECERRADO>)?(pisobajo2=<PISOBAJO>)?
    {
        if (valores4!=null) //Es cuando se le asigna una operacion a una posicion de un arreglo, si es diferente de null es porque la asignacion a una posicion de un arreglo
        {
            if (valores3!=null) //arreglo que indica si el ultimo operador es una posicion de un arreglo
            {
                generar.escribirArregloVariableOperacionArreglo(null,id1.image,valores4[0],valores1[0], op.image,valores2[0],valores3[0], pisobajo1,pisobajo2);
                String tipo=generar.buscarVariable(id1.image);
                //String []valores5=new String[2];
                valores5[0]=id1.image;              
                valores5[1]=tipo;
                generar.escribirLog(id1,valores5);
            }
            else
            {
                generar.escribirArregloVariableOperacionVariable(null, id1.image, valores4[0],valores1[0], op.image,valores2[0], pisobajo1,pisobajo2);
                String tipo=generar.buscarVariable(id1.image);
                //String []valores5=new String[2];
                valores5[0]=id1.image;              
                valores5[1]=tipo;
                generar.escribirLog(id1,valores5); 
            }
        }
        else
        {
            if (valores3!=null)
            {
                String existe=generar.buscarVariable(id1.image);
                if (existe==null)
                {
                    generar.insertarVariable("number",id1.image);
                    String tipo=generar.buscarVariable(id1.image);
                    generar.escribirVariableVariableOperacionArreglo(tipo, id1.image,valores1[0], op.image,valores2[0],valores3[0], pisobajo1,pisobajo2);
                    valores1[1]=generar.buscarVariable(id1.image);
                   
                }
                else
                {
                    generar.escribirVariableVariableOperacionArreglo(null, id1.image,valores1[0], op.image,valores2[0],valores3[0], pisobajo1,pisobajo2);
                    
                }
                generar.escribirLog(id1,valores1);
            }
            else
            {
               String existe=generar.buscarVariable(id1.image);
                if (existe==null)
                {
                    generar.insertarVariable("number",id1.image);
                    String tipo=generar.buscarVariable(id1.image);
                    generar.escribirVariableVariableOperacionVariable(tipo, id1.image,valores1[0], op.image,valores2[0], pisobajo1,pisobajo2);
                }
                else
                {
                    generar.escribirVariableVariableOperacionVariable(null, id1.image,valores1[0], op.image,valores2[0], pisobajo1,pisobajo2);
                }
                generar.escribirLog(id1,valores1);
            }
        }
    }
    | <REMOVE><PARENTESISABIERTO><PARENTESISCERRADO>
    {
        String tipo=generar.buscarVariable(valores1[0]);
        if (tipo.equals("stack"))
        {
            tipo=generar.buscarVariable(id1.image);
            generar.escribirDesapilar(tipo, id1.image, valores1[0]);
            tipo=generar.buscarVariable(id1.image);
            valores5[0]=id1.image;
            valores5[1]=tipo;
            generar.escribirLog(id1,valores5);
        }
        else
        {
            tipo=generar.buscarVariable(id1.image);
            generar.escribirDesencolar(tipo, id1.image, valores1[0]);
            tipo=generar.buscarVariable(id1.image);
            valores5[0]=id1.image;
            valores5[1]=tipo;
            generar.escribirLog(id1,valores5);
        }
        
    }
    |(longitud=<LENGTH>)?
    {
        //si no paso por la gramatica de empezar con una posicion de un arreglo entonces fue una variable
        if (valores4==null)
        {
            String existe=generar.buscarVariable(id1.image);
            if (existe==null)
            {
                //String []valores5=new String[2];
                valores5[0]=id1.image;
                valores5[1]=valores1[1];
                generar.insertarVariable(valores5[1],id1.image);
                generar.escribirVariable(id1.image,valores1, longitud);
                if (longitud==null)
                {
                    generar.escribirLog(id1,valores5);
                }
                else
                {
                    valores5[1]="number";
                    generar.escribirLog(id1,valores5);
                }
            }
            else 
            {
                //String []valores5=new String[2];
                valores5[0]=id1.image;
                valores5[1]=valores1[1];
                generar.escribirVariable(id1.image,valores1, longitud);
                generar.escribirLog(id1,valores5);
            }
        }
        else
        {
            tipo=generar.buscarVariable(id1.image);
            //String []valores5=new String[2];
            valores5[0]=id1.image;
            valores5[1]=tipo;
            generar.escribirArregloAccesoVariable(id1.image, valores4[0], valores1[0], longitud);
            generar.escribirLog(id1,valores5);
        }
    }
}

void OPERACION4(Token id,String []valoresp1, String []valoresp2,String []valoresp3,Token pisobajop1):
{Token id1=id; String []valores1=valoresp1; String []valores2=valoresp2; String []valores3=valoresp3; Token pisobajo1=pisobajop1; String []valores4; String []valores5=null; Token pisobajo2=null; Token op;}
{
    op=<OPERADOR>valores4=VALOR()(<CORCHETEABIERTO>valores5=VALOR()<CORCHETECERRADO>)?(pisobajo2=<PISOBAJO>)?
    {
        if (valores1==null)
        {
            if (valores5==null)
            {
                String tipo=generar.buscarVariable(id1.image);
                generar.escribirVariableArregloOperacionVariable(tipo, id1.image, valores2[0], valores3[0], op.image,valores4[0], pisobajo1, pisobajo2);
                tipo=generar.buscarVariable(id1.image);
                String []valores6=new String[2];
                valores6[0]=id1.image;
                valores6[0]=tipo;
                generar.escribirLog(id1,valores6);
            }
            else
            {
                String tipo=generar.buscarVariable(id1.image);
                generar.escribirVariableArregloOperacionArreglo(tipo,id1.image, valores2[0],valores3[0], op.image, valores4[0], valores5[0], pisobajo1, pisobajo2);
                tipo=generar.buscarVariable(id1.image);
                String []valores6=new String[2];
                valores6[0]=id1.image;
                valores6[1]=tipo;
                generar.escribirLog(id1,valores6);
            }    
        }
        else    
        {
            if (valores5==null)
            {
                String tipo=generar.buscarVariable(id1.image);
                generar.escribirArregloArregloOperacionVariable(null, id1.image, valores1[0], valores2[0], valores3[0], op.image,valores4[0], pisobajo1, pisobajo2);
                String []valores6= new String[2];
                valores6[0]=id1.image;
                valores6[1]=tipo;
                generar.escribirLog(id1,valores6);
            }
            else
            {
                String tipo=generar.buscarVariable(id1.image);
                generar.escribirArregloArregloOperacionArreglo(null, id1.image, valores1[0], valores2[0], valores3[0], op.image, valores4[0], valores5[0], pisobajo1, pisobajo2);
                String []valores6= new String[2];
                valores6[0]=id1.image;
                valores6[1]=tipo;
                generar.escribirLog(id1,valores6);
            }
        }
    }
    |
    {
        if (valores1==null)
        {
            String tipo=generar.buscarVariable(id1.image);
            generar.escribirVariableAccesoArreglo(tipo, id1.image, valores2[0],valores3[0]);
            String []valores6=new String[2];
            valores6[0]=id1.image;
            valores6[1]=tipo;
            generar.escribirLog(id1,valores6);
        }
        else 
        {
            String tipo=generar.buscarVariable(id1.image);
            generar.escribirArregloAccesoArreglo(null, id1.image,valores1[0], valores2[0],valores3[0]);
            String []valores6=new String[2];
            valores6[0]=id1.image;
            valores6[1]=tipo;
            generar.escribirLog(id1,valores6);
        }
    }
}


//Esta produccion permite obtener los elementos para un arreglo o para asignar parametros a una funcion o procedimiento
String ELEMENTO():
{String[] valores; Token coma=null;}
{
    valores=VALOR()(coma=<COMA>)?
    {
        if (coma!=null)
        {
            return valores[0]+coma.image;
        }
        else
        {
            return valores[0];
        }
    }
}
    
void FOR():
{Token id1; String[] valores1; String[] valores2; Token longitud=null; Token lfor;}
{
    lfor=<FOR><PARENTESISABIERTO>id1=<IDENTIFICADOR><ASIGNACION>valores1=VALOR()<TO>valores2=VALOR()(longitud=<LENGTH>)?<PARENTESISCERRADO><DO><BEGIN>
    {
        generar.insertarVariable(valores1[1],id1.image);
        generar.escribirLog(lfor,null);
        if (longitud==null)
        {
            generar.escribirFor(id1.image+"="+valores1[0]+";"+id1.image+"<"+valores2[0]+";"+id1.image+"++");
        }
        else
        {
            generar.escribirFor(id1.image+"="+valores1[0]+";"+id1.image+"<"+valores2[0]+".length;"+id1.image+"++");
        }
        generar.escribirLog(id1,valores1);
    }
    E()<END>
    {
        generar.recibir("}");
    }
    E()
}

String [] VALOR() :
{Token valor;String [] valores = new String[2];}
{
    valor=<IDENTIFICADOR>
    {
        valores[0]=valor.image;
        valores[1]=generar.buscarVariable(valor.image);
        return valores;
    }
    | valor=<NUMBER>
    {
        valores[0]=valor.image;
        valores[1]="number";
        return valores;
    }
    | valor=<CADENA>
    {
        valores[0]=valor.image;
        valores[1]="chain";
        return valores;
    }
}

