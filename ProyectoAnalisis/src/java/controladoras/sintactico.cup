/* ---------------Seccion de declaraciones preliminares--------------------*/
package controladoras;

import java_cup.runtime.*;
import java.io.FileReader;
import controladoras.Compilador;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */

action code{:
    public Compilador compilador=new Compilador();
:};

parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};

//terminal comentario, identificador, numero, alfanumerico, cadena, retorno, coma, mientras, para, to, hacer, repeat, until, si, then, elif, no, begin, end, length, null, procedure, function, en, es, call, and, or, not, mod, div, verdadero, falso, pa1,pa2, pb1,pb2, menor, mayor, menorigual, mayorigual, igual, diferente, suma, resta, multiplicacion, division, corcheteabierto,corchetecerrado, parentesisabierto, parentesiscerrado, dospuntos, unpunto, potencia, asignacion;
terminal IDENTIFICADOR, NUMERO, CADENA, BEGIN, END, ASIGNACION;
non terminal exp_s, exp_a, exp_e, exp_variable;
//start with S;
exp_s ::= BEGIN exp_a END;
exp_a ::= BEGIN exp_e END;
exp_e ::= exp_variable exp_e | ;
exp_variable ::= IDENTIFICADOR:i ASIGNACION NUMERO:n
{:
    compilador.addVariable(i, n);
    compilador.showVariables();
:}
| 
IDENTIFICADOR:i ASIGNACION CADENA:c
{:
    compilador.addVariable(i,c);
    compilador.showVariables();
:}
| 
IDENTIFICADOR:n ASIGNACION IDENTIFICADOR:v
{:
    compilador.findAddVariable(n, v);
    compilador.showVariables();
:};
